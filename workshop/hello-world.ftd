

/-- boolean $what-are-task-1-completed: false
$always-include$: true

/-- object what-are-task-1-object:
function: ls.set-boolean
variable: $what-are-task-1-completed

/-- ws.understood what-are-task-1-button: Done
$on-click$: $what-are-task-1-completed = true
$on-click$: message-host $what-are-task-1-object
$task-status: $what-are-task-1-completed

/-- boolean $what-are-task-2-completed: false
$always-include$: true

/-- object what-are-task-2-object:
function: ls.set-boolean
variable: $what-are-task-2-completed

/-- ws.understood what-are-task-2-button: Done
$on-click$: $what-are-task-2-completed = true
$on-click$: message-host $what-are-task-2-object
$task-status: $what-are-task-2-completed

/-- boolean $what-are-task-3-completed: false
$always-include$: true

/-- object what-are-task-3-object:
function: ls.set-boolean
variable: $what-are-task-3-completed

/-- ws.understood what-are-task-3-button: Done
$on-click$: $what-are-task-3-completed = true
$on-click$: message-host $what-are-task-3-object
$task-status: $what-are-task-3-completed






/-- ws.chapter: Hello World
id: ws-hello-world
sidebar: true

To use [FTD](https://ftd.dev) language we have to use [FASTN](https://fastn.dev)
the package manager and server for FTD.

In this exercise **we will install FASTN, and run a hello world program**.


/-- ws.task: Task 1: Install FASTN
$status: $what-are-task-1-completed
button: what-are-task-1-button:

To install {ds.highlight: fastn we will use the installation script}:

/-- ds.code: install fastn
lang: sh

sudo sh -c "$(curl -fsSL https://raw.githubusercontent.com/ftd-lang/fastn/main/install-fastn.sh)"

/-- ds.markdown:

This installs `fastn` in `/usr/local/bin/fastn`. If you are curious this is the
[source code of fastn-install.sh](https://github.com/ftd-lang/fastn/blob/main/install-fastn.sh).

Alternately, you can go to the [FASTN Releases Page](https://github.com/ftd-lang/fastn/releases)
and download the fastn binary for your platform from the latest release as well.

We support recent versions of Linux, Mac and Windows.

{ds.highlight: To test if the installation worked, run:}

/-- ds.code: run `fastn` to see if its working
lang: sh

fastn

/-- ds.markdown:

And it will show you the fastn help text. Shout out to let everyone know when
you are done with this step.

If you get an error message in chat or speak up.

/-- container: ws-hello-world

/-- ws.task: Task 2: FASTN.ftd
$status: $what-are-task-2-completed
button: what-are-task-2-button:

/-- ds.markdown:

Note: If you have not yet cloned `ftd-lang/ftd-workshop` repo as mentioned in
[workshop basics](id: ws-basics), please do it now:
`git clone https://github.com/ftd-lang/ftd-workshop.git`.

FTD files are organized in FASTN as a "fastn package". This is like `npm package`
for JavaScript or `cargo crate` for Rust.

A FASTN package is a folder containing a file named `FASTN.ftd` and some FTD files.

If you run `fastn serve` right now and go to http://127.0.0.1:8000 it will fail
with message in terminal saying FASTN.ftd file is missing.

{ds.highlight: Lets fix this by creating a `FASTN.ftd` file with the following content:}

/-- ds.code: sample `FASTN.ftd` file
lang: ftd

\/-- import: fastn

\/-- fastn.package: hello


/-- ft.markdown:

We have "imported" fastn, a special `ftd module` (each ftd file is called a `fastn
module`, the way we call `.py` files `python modules`).

We have created an instance of `fastn.package` and passed `hello` as the name of
the package.

Now if you run `fastn serve` it will pick up `FASTN.ftd` and when you go to the
server address (http://127.0.0.1:8000 by default), you will see an empty page.

Congrats, you have created your first FASTN package!

/-- container: ws-hello-world

/-- ws.task: Task 3: Hello World
$status: $what-are-task-3-completed
button: what-are-task-3-button:

`ftd` has a concept of "[components](https://ftd.dev/component/)". FTD
components are UI building blocks. FTD comes with a bunch of [kernel
components](https://ftd.dev/kernel/), you can think of them as the `div` and `p`
etc provided by HTML. One of the is kernel components is [ftd.text](https://ftd.dev/text/),
which is used for showing text.

We are going to use `ftd.text` to show a hello world message in this exercise.

The reason we saw an empty page is because `fastn` finds `index.ftd` next to
`FASTN.ftd`. Any file `foo.ftd` is converted to URL `/foo/`. If it was `x/y.ftd`
the URL is `/x/y/`. We have special rule for `index.ftd` file, so `index.ftd`
on top level is `/`. `x/index.ftd` would have been `/x/` and so on.


This repo comes with an [index.ftd](https://github.com/ftd-lang/ftd-workshop/blob/main/01-data/01-hello-world/index.ftd)
file, {ds.highlight: go ahead and view it and modify it as it instructs}.

/-- container: ws-hello-world

/-- ds.h1: You are Done

/-- ds.markdown:

You have installed fastn and created your first fastn package. Good job!

{ds.highlight: Move to learning about [booleans now](id: ws-booleans)} or back to
[the workshop page](id: workshop).


/-- container: ws-hello-world.content-wrap.right-sidebar

/-- ws.sidebar:

/-- container: ws-hello-world.content-wrap.right-sidebar-mobile

/-- ws.sidebar: