-- ds.page: Workshop: Patna

We are going to have a FTD Handson Workshop In Patna.

Data: 28th Aug 2022

Venue: To be decided.


/-- fastn.toc-item list empty-toc:


/-- boolean internal-user: false

/-- ftd.text: Toggle Internal User
$on-click$: toggle $internal-user



-- ds.h1: What is an Ideal Student Persona?

An ISP is a fictional person representing a key segment of your audience which is more 
likely to buy a product from you.

1. Their current situation
2. Their goal(s)
3. The roadblocks that prevent them from achieving their goal

Our ISP is a developer, with good algo, ds, programming fundamentals, but struggles with
building user interfaces. Our student is not confident about CSS and DOM quirks, they have
difficulty realising basic design in browser. If they can do some frontend, it is usually
an unmaintainable mess. There is no proper modular design, the code is barely re-usable or
extendable. 

They maybe be fluent with Python, Django, Flask. Or Golang, Rust etc. Or maybe they are
devops, who create basic scripts, but struggle with converting those scripts to web based
dashboards, because UI is their weak point.

Our target also includes people who are really new to programming. Who have just written
their hello world, and now want to make something more interesting, with some sort of
interactable user interface.

Our workshop also targets people who can professionally use Javascript and CSS, know the
ins and outs the latest frontend technolgy, but do not want to maintain all that complexity
for their blog, or simple web application. Who want to get some UI out, who want to use 
our extensive design library to get something done quickly.




-- ds.h1: Tangible Outcome

This workshop will focus on creating modern content centric websites using modular,
re-usable ui components, so they are easy to extend and re-use. You will learn how to 
work with data driven UI, how to do event handling and how to communicate with the 
backend. 

We will create pricing page, slide show. The website will support dark mode, will be
mobile responsive and use proper style guide with focus on typography.

Along with `ftd`, you will also learn about `fastn`, which lets you create websites with
online content editor, granular access control, and collaborative content editing us
Github Pull Request like workflow.

------

FTD is not the techonlgy to build the next google maps, or gmail, or figma etc.
Consider Github. Or Twitter. These applications do not have much interaction,
they data heavy.

Limited interaction, data drive, simple forms, pages. With emphasis on creating
reusable components, and scalable architecture. You have a lot of components,
how to package those components as standalone libraries etc. The website will
support dark mode, will be mobile responsive and use proper style guide with
focus on typography.

-- ds.h1: Application: Mini IMDb

We will be build a movie review website. The backend is already done. It will
have a concept of a movie, and on top of movie there would be reviews.

-- ds.h2: Dependency: APIs

We will create a django app that will be deployed on heroku. We will also have
complete API documentation.

-- ds.h3: Movie List

Optional Query. Sort: [release-date, rating, updated_on].

-- ds.code:
lang: ftd

\-- record response:
integer page-number:
optional string next:
optional string previous:
integer count:
movie list movies:

\-- record movie:
integer id:
caption title:
string release-date:
string poster:
string director:
body description:
decimal rating:
integer review-count:
review list reviews:

\-- record review:
integer id:
caption title:
body description:
string reviewer:
integer rating:

-- ds.h3: Add Movie

Movie data without id. On error it returns error dict with one string for every
field. On success ftd redirect to movie page.

-- ds.h3: Add Review

Review data without id. On success redirect to movie page.

-- ds.h3: Get Movie

Movie id -> response record.

-- ds.code:
lang: ftd

\-- record response:
optional movie movie:

-- ds.h2: Dependency: Get Data Processor To Fetch Data From Query Params

If the request is to `/movie/?id=<>`, (file is `movie.ftd`), the following will
load the value of `id` parameter from the query parameter by the same name.

-- ds.code:
lang: ftd

\-- optional integer id:
$processor$: get-data

-- ds.h2: Dependency: FASTN Proxy API

FASTN will expose an api `/-/proxy/`, which will take URL. `proxy` will make a
request to `url`, it will use the same method.

-- ds.code:
lang: py

def proxy(request):
    url = request.REQUEST.get("url")
    method = request.method
    query = request.QUERY
    query.delete("url")
    body = request.body
    headers = request.headers

    headers.delete_cookie()

    resp = make_request(url, method, query, body)
    return resp



-- ds.h1: PURE Framework

-- ds.h2: Pain

Good: I hate my job and I want to quit, so I really need to make money online

Not so good: It would be nice to have more money

Ours: 

I want to build a good looking UI for the project I am working on and hate
deisgning things from scratch, and want to focus on getting it done, instead of
wasting time on React and Webpack and endless CSS courses.

I hate that I am good at programming, live and breath algo and ds, and yet the UI 
I create ends up taking a lot of time to build and still looking like crap. 

-- ds.h2: Urgent

Good: I want to get in shape before my wedding

Not so good: I want to lose weight

Ours:

I have wasted so much time in collage, and I still do not have anything good looking
to show for. All my coding projects are just give in github repo and no one can 
use them, it because hard to stand out, if they had working UI I would have had
much better impact.

Every day I am not finishing and deploying a project is a day wasted. I already had
so many years of experience.

I do not have forever to evaluate this project. I have to learn frontend in few months
or I have to go back to becoming better at core programming. I can not waste lot of
time on this.

-- ds.h2: Recognised

How to prove that enough people want to solve this problem.

Full stack programmers get higher salaries, are in large demand. Knowing only backend
means so many projects you can do, but you can not, because it needs a bit of UI, where
you start to struggle.

Virtually every programmer who prepares for interviews ends up learning algo and ds, but
their very few programmers end up getting frontend skills. 

-- ds.h2: Easy

We have designed FTD to make frontend easy. No one has time to learn and re-learn 
constantly evolving frontend library landscape. Material design or bootstrap? Tailwind
or PostCSS? React or Vue or Angular or Dart? React with hooks or without? Which SPA
framework, which data routing etc etc.

FTD makes it very easy.

-- ds.h2: Are we really PURE?

Frontend is `painful`. The importance of frontend is `recognised`. And FTD is `easy`.
So we are 3 of 4. `urgency` wise we are as good as any other technology to be frank,
if there is no urgency to learn FTD probably there is none to learn React.




-- ds.h1: Requirements

- Motivation, Why to use `ftd`
- What is `ftd` and itâ€™s all components
    - How to start a `ftd` project
    - How to use them
        - Section Subsections
        - Component Definition, Calling, Lifecycle
        - If and else
        - loop
        - events
        - processor etc
        
-- end: ds.page