-- import: fastn

/-- ftd.color efefef: #efefef
dark: #efefef

/-- ftd.color white: white
dark: white

/-- ftd.color ebe2ce: #ebe2ce
dark: #ebe2ce

/-- ftd.color d9e7f8: #d9e7f8
dark: #d9e7f8

/-- ftd.color dc9eb3: #dc9eb3
dark: #dc9eb3

/-- ftd.color 76c2c4: #76c2c4
dark: #76c2c4

/-- ftd.color fce251: #fce251
dark: #fce251

/-- ftd.color d2d2ce: #d2d2ce
dark: #d2d2ce

/-- ftd.color f09483: #f09483
dark: #f09483

/-- ftd.color yellow: yellow
dark: yellow

-- ds.page: An Architecture Diagram

-- ds.markdown: 

In this example you can see an architecture diagram created using FTD.

It is interactive, you can click on individual blocks. It is not yet responsive,
we will be updating the example to make it mobile optimized/responsive soon.

/-- diagram:

/-- string info: start-info


/-- ftd.column diagram:
background-color: $efefef
width: fill
height: fill
padding: 40

-/-- ftd.scene:
background-color: $white
width: 1350
height: 540
$on-click$: $info = kubernetes-info
scale: 0.65
margin-left: -267
margin-top: -95

--- control-panel:
left: 50
top: 20
$on-click$: $info = control-panel-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- nodes:
top: 20
right: 50
$on-click$: $info = nodes-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- vertical-line:
length: 231
top: 207
left: 612

--- vertical-line:
length: 46
top: 154
right: 462

--- vertical-line:
length: 46
top: 266
right: 462

--- horizontal-line:
length: 113
top: 154
right: 506

--- container: ftd.main

-/-- ftd.column:
background-color: $ebe2ce
width: fill
padding: 10
margin-top: -60

-/-- ftd.column:
width: fill
padding: 10
border-width: 2
border-radius: 4
spacing: 5

-/-- ftd.text: Notes:
role: $fastn.type.copy-large

--- start-info:
if: $info == start-info

--- kubernetes-info:
if: $info == kubernetes-info

--- control-panel-info:
if: $info == control-panel-info

--- kube-api-server-info:
if: $info == kube-api-server-info

--- etcd-info:
if: $info == etcd-info

--- kube-controller-manager-info:
if: $info == kube-controller-manager-info

--- node-controller-info:
if: $info == node-controller-info

--- replication-controller-info:
if: $info == replication-controller-info

--- endpoints-controller-info:
if: $info == endpoints-controller-info

--- service-account-token-controller-info:
if: $info == service-account-token-controller-info

--- cloud-controller-manager-info:
if: $info == cloud-controller-manager-info

--- cloud-node-controller-info:
if: $info == cloud-node-controller-info

--- cloud-route-controller-info:
if: $info == cloud-route-controller-info

--- cloud-service-controller-info:
if: $info == cloud-service-controller-info

--- nodes-info:
if: $info == nodes-info

--- kubelet-info:
if: $info == kubelet-info

--- kube-proxy-info:
if: $info == kube-proxy-info

--- container-runtime-info:
if: $info == container-runtime-info




/-- ftd.scene control-panel:
background-color: $d9e7f8
border-color if $MOUSE-IN: $fastn.color.main.text
border-width: 2
width: 600
height: 460
align: center
border-radius: 4

-/-- ftd.text: Control Panel
top: 5
left: 5
role: $fastn.type.copy-large

--- kube-controller-manager:
top: 50
left: 20
$on-click$: $info = kube-controller-manager-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- kube-api-server:
top: 50
right: 35
$on-click$: $info = kube-api-server-info
$on-click$: stop-propagation
$on-click$: prevent-default


--- etcd:
top: 220
left: 40


--- cloud-controller-manager:
top: 300
left: 20
$on-click$: $info = cloud-controller-manager-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- vertical-line:
length: 42
top: 100
right: 135

--- vertical-line:
length: 353
top: 250
left: 108

--- horizontal-line:
length: 50
top: 251
left: 304


/-- ftd.text etcd: etcd
padding: 20
border-width: 2
border-radius: 10
background-color: $white
border-color if $MOUSE-IN: $fastn.color.main.text
$on-click$: $info = etcd-info
$on-click$: stop-propagation
$on-click$: prevent-default



/-- ftd.column kube-controller-manager:

--- box:
background-color: $dc9eb3
title: Kube Controller Manager

--- text-block: Node Controller
$on-click$: $info = node-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Replication Controller
$on-click$: $info = replication-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Endpoints Controller
$on-click$: $info = endpoints-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Service Account & Token Controller
$on-click$: $info = service-account-token-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default



/-- ftd.column cloud-controller-manager:

--- box:
background-color: $76c2c4
title: Cloud Controller Manager

--- text-block: Node Controller
$on-click$: $info = cloud-node-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Route Controller
$on-click$: $info = cloud-route-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Service Controller
$on-click$: $info = cloud-service-controller-info
$on-click$: stop-propagation
$on-click$: prevent-default





/-- ftd.row kube-api-server:
width: 100
height: 270
background-color: $fce251
border-width: 2
padding: 20
border-color if $MOUSE-IN: $fastn.color.main.text
/border-color if $info == $kube-api-server-info: $fastn.color.main.text

-/-- ftd.text: Kube Api Server
align: center






/-- ftd.scene nodes:
background-color: $d2d2ce
border-width: 2
border-radius: 4
width: 600
height: 460
align: center
border-color if $MOUSE-IN: $fastn.color.main.text

-/-- ftd.text: Nodes
top: 5
left: 5
role: $fastn.type.copy-large

-/-- ftd.column:
top: 50
left: 90
background-color: $f09483
width: 400
height: 300
border-width: 2
border-radius: 4

--- container: ftd.main

--- worker-node:
top: 70
left: 115




/-- ftd.scene worker-node:
background-color: $f09483
width: 400
height: 300
border-width: 2
border-radius: 4

-/-- ftd.text: Worker Node
top: 5
left: 5

--- text-block: Kubelet
left: 70
top: 50
$on-click$: $info = kubelet-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Kube Proxy
left: 70
top: 150
$on-click$: $info = kube-proxy-info
$on-click$: stop-propagation
$on-click$: prevent-default

--- text-block: Container Runtime
left: 180
top: 100
$on-click$: $info = container-runtime-info
$on-click$: stop-propagation
$on-click$: prevent-default



/-- ftd.column box:
optional ftd.color background-color:
string title:
background-color: $background-color
border-width: 2
spacing: 20
width: 400
align: center
open: true
append-at: box-id
padding: 15
border-color if $MOUSE-IN: $fastn.color.main.text
border-radius: 4

-/-- ftd.text: $title
top: 5
left: 5
role: $fastn.type.copy-large

-/-- ftd.row:
spacing: space-around
width: fill
top: 40
left: 0
id: box-id



/-- ftd.text text-block: $text
caption text:
background-color: $white
width: 80
padding: 5
align: center
border-width: 2
border-color if $MOUSE-IN: $fastn.color.main.text
border-radius: 4

/-- ftd.row vertical-line:
string length:
width: $length
height: 1
border-width: 1
open: false

/-- ftd.row horizontal-line:
string length:
height: $length
width: 1
border-width: 1
open: false


/-- ftd.text start-info: Click on various components to see the related-information.
/-- ftd.text kubernetes-info:

**Kubernetes**: A Kubernetes cluster consists of a set of worker machines, called
nodes, that run containerized applications. Every cluster has at least one
worker node.

The worker node(s) host the Pods that are the components of the application workload.
The control plane manages the worker nodes and the Pods in the cluster. In
production environments, the control plane usually runs across multiple
computers and a cluster usually runs multiple nodes, providing fault-tolerance
and high availability.


/-- ftd.text control-panel-info:

**Control Panel**: The control planes components make global decisions about the
cluster (for example, scheduling), as well as detecting and responding to
cluster events (for example, starting up a new pod when a deployments replicas
field is unsatisfied).

Control plane components can be run on any machine in the cluster. However, for
simplicity, set up scripts typically start all control plane components on the
same machine, and do not run user containers on this machine. See Creating
Highly Available clusters with kubeadm for an example control plane setup that
runs across multiple VMs.


/-- ftd.text kube-api-server-info:

**Kube Api Server**: The API server is a component of the Kubernetes control plane
that exposes the Kubernetes API. The API server is the front end for the
Kubernetes control plane.

The main implementation of a Kubernetes API server is kube-apiserver.
kube-apiserver is designed to scale horizontallyâ€”that is, it scales by deploying
more instances. You can run several instances of kube-apiserver and balance
traffic between those instances.


/-- ftd.text etcd-info:

**etcd**: Consistent and highly-available key value store used as Kubernetes backing
store for all cluster data.

If your Kubernetes cluster uses etcd as its backing store, make sure you have a
back up plan for those data.


/-- ftd.text kube-controller-manager-info:

**Kube Controller Manager**: Control plane component that runs controller processes.

Logically, each controller is a separate process, but to reduce complexity, they
are all compiled into a single binary and run in a single process.


/-- ftd.text node-controller-info:

**Node controller**: Responsible for noticing and responding when nodes go down.

/-- ftd.text replication-controller-info:

**Replication Controller**: Watches for Job objects that represent one-off tasks,
then creates Pods to run those tasks to completion.

/-- ftd.text endpoints-controller-info:

**Endpoints controller**: Populates the Endpoints object (that is, joins
Services & Pods).

/-- ftd.text service-account-token-controller-info:

**Service Account & Token controllers**: Create default accounts and API access
tokens for new namespaces.

/-- ftd.text cloud-controller-manager-info:

**Cloud controller manager**: A Kubernetes control plane component that embeds
cloud-specific control logic. The cloud controller manager lets you link your
cluster into your cloud providers API, and separates out the components that
interact with that cloud platform from components that only interact with
your cluster.

The cloud-controller-manager only runs controllers that are specific to your
cloud provider. If you are running Kubernetes on your own premises, or in a
learning environment inside your own PC, the cluster does not have a cloud
controller manager.

As with the kube-controller-manager, the cloud-controller-manager combines
several logically independent control loops into a single binary that you run
as a single process. You can scale horizontally (run more than one copy) to
improve performance or to help tolerate failures.

/-- ftd.text cloud-node-controller-info:

**Node controller**: For checking the cloud provider to determine if a node has been
deleted in the cloud after it stops responding.

/-- ftd.text cloud-route-controller-info:

**Route controller**: For setting up routes in the underlying cloud infrastructure.

/-- ftd.text cloud-service-controller-info:

**Service controller**: For creating, updating and deleting cloud provider
load balancers.

/-- ftd.text nodes-info:

**Node Components**: Node components run on every node, maintaining running pods
and providing the Kubernetes runtime environment.

/-- ftd.text kubelet-info:

**Kubelet**: An agent that runs on each node in the cluster. It makes sure that
containers are running in a Pod.

The kubelet takes a set of PodSpecs that are provided through various mechanisms
and ensures that the containers described in those PodSpecs are running and
healthy. The kubelet doesnt manage containers which were not created by
Kubernetes.

/-- ftd.text kube-proxy-info:

**Kube-proxy**: kube-proxy is a network proxy that runs on each node in your
cluster, implementing part of the Kubernetes Service concept.

kube-proxy maintains network rules on nodes. These network rules allow network
communication to your Pods from network sessions inside or outside of your
cluster.

kube-proxy uses the operating system packet filtering layer if there is one and
its available. Otherwise, kube-proxy forwards the traffic itself.

/-- ftd.text container-runtime-info:

**Container runtime**: The container runtime is the software that is responsible for
running containers.

Kubernetes supports several container runtimes: Docker, containerd, CRI-O, and
any implementation of the Kubernetes CRI (Container Runtime Interface).


-- end: ds.page