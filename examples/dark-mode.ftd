-- import: ftd.dev/assets
-- import: fastn

-- ds.page: Building Dark-Mode Switcher Using FTD

-- ds.markdown: 

In this tutorial we are going to design dark mode switcher from scratch.

-- ds.h1: A Note on UI

Many Dark Mode switchers act as toggle switches, they let user switch from one
state, dark-mode, to another, light mode:

/-- dark-mode-toggle:


/-- ftd.column dark-mode-toggle:
boolean dark-mode: true
width: fill
margin-bottom: 15
padding: 10
border-width: 1
border-radius: 5
background-color if $ftd.dark-mode: $fastn.color.main.background.base
background-color: $fastn.color.main.background.base

/--- ftd.row:
spacing: 5
align: right

/--- ftd.text: Dark Mode:
color if $ftd.dark-mode: $fastn.color.main.text
color: $fastn.color.main.text
move-down: 5
$on-click$: toggle $ftd.dark-mode

/--- ftd.text: ðŸŒ™
if: $ftd.dark-mode
move-up: 2
$on-click$: toggle $ftd.dark-mode

/--- ftd.text: ðŸŒž
if: not $ftd.dark-mode
scale: 1.2
$on-click$: toggle $ftd.dark-mode

/--- container: ftd.main

/--- ftd.row:
boolean dark-mode: true
border-bottom-radius: 5
width: fill

/--- ftd.text:
color if $ftd.dark-mode: $fastn.color.main.text
color: $fastn.color.main.text

This is some text to show you dark mode. Try clicking on the ðŸŒ™ / ðŸŒž above.


-- ds.markdown:

This is a common pattern, you will find that kind of dark mode toggle in many
website.

-- ds.h2: Two State vs Three State Logic

Today operating system have also started supporting dark mode. The dark mode
switcher, the UI that we are building in this tutorial {ds.highlight: should
ideally not exist at all}. Every site that supports dark mode should simply
honor the operating system preferences set by the user.

-- ds.image:
;; if: $ftd.dark-mode
src: $assets.files.images.dark-mode.dark-mode-preferences.png

-- ds.image:
;; if: not $ftd.dark-mode
src: $assets.files.images.dark-mode.light-mode-preferences.png

-- ds.markdown:

From the Help in the OSX Preferences:

> Auto gradually adjusts the appearance from light to dark throughout the day.

We should honor the operating system preferences because then user gets a more
coherent desktop environment. All apps use dark mode or none do. Also operating
systems give more advanced control, for example automatic switching to dark mode
based on ambient lighting, or based on time of the day. You would not expect
every website to create such complex logic, doing so based on time of day is
slightly simpler, you only have to worry about finding user's time zone reliable,
account for daylight saving etc, but ambient light detection is hard problem and
requires access to webcam etc, which nobody would give access too!

One can argue the only purpose of the manual switcher in websites that do
support it is show off that this supports it, and maybe given people who love to
fiddle things yet another fidget spinner. Or maybe it signals as a reminder to
end users that we have this feature, see we care about you, or maybe see this is
yet another reason we are cooler than our "enterprise" competitor. For
developers of the site it acts as a debug tool, and should ideally be relegated
to Browser Developer Tools.

Dark mode support, good, I personally find it a major readability improvement,
especially in the night. Dark mode switcher? Not needed as much as current trend
shows.

So if OS is better at switching things, should sites have switcher? This is up to
product managers to decide. But if someone was to ask if they have to have
switcher, how should switcher act? For this question the two state switcher is
almost definitely a bad idea and should never be used, over a three state
switcher:


-- ds.markdown:

This UI is connected with "fastn variables" that are also used by the theme so you
can see that it's changing entire page's dark mode setting. Also the settings in
this are persisted in a cookie, so you do not lose the value.

If you pay attention, the dark mode UI when the popup is open show if the system
is currently in dark-mode or light-mode. Try toggling your operating system
dark-mode preferences while the drop-down is open to see it change in real-time.

This is the Three-State dark-mode we would be building in this tutorial.

-- ds.h1: A Note On Packaging

We would be packaging the end product such that you can use it from any `fastn`
package as a dependency. The name of package we would be creating is
[fifthtry.github.io/dark-mode-switcher](///fifthtry.github.io/dark-mode-switcher),
so its source will be stored on Github in
[FifthTry/dark-mode/switcher](///github.com/fifthTry/dark-mode-switcher).

The package name is also a URL, which should be the homepage and documentation
of that package.

-- ds.h1: Creating The Package

Lets start with creating the package. We have to create our Github Repo. Head
over to Github to create the new repo:

-- ds.image:
src: $assets.files.images.dark-mode.new-repo.png
width: fill-container

Pick any name. Note that the name of repo is part of the name of the fastn package
you are building, people will be importing it etc, so pick the name accordingly:

-- ds.image:
src: $assets.files.images.dark-mode.pick-name.png
width: fill-container

Also since this is a package to be shared with the world you want the package to
be public. The repository need not necessarily be public, it is possible for
Github Pages to keep the Github Pages published site to be public, but not the
source code, but for the purpose of this tutorial and simplicity lets keep it
public.

This will create an empty repository.

-- ds.image:
src: $assets.files.images.dark-mode.created.png
width: fill-container

Now it's time for us to publish. If you did not pick a licence and README we
will have to create a new Git repository as instructed in above message. If you
picked those items Github would have created and initialised your repository
that you will have to clone.

An package is pretty bare bones, it needs only two files, `FASTN.ftd` and
`index.ftd`. `FASTN.ftd` file is the package meta data of the package, and [this
is how it looks like for our tutorial](https://github.com/FifthTry/dark-mode-switcher/blob/main/FASTN.ftd):

-- ds.code:
lang: ftd

\-- import: fastn

\-- fastn.package: fifthtry.github.io/dark-mode-switcher
zip: github.com/fifthtry/dark-mode-switcher/archive/refs/heads/main.zip

-- ds.markdown:

The name must match name of your repository, so if you created foo/bar, the name
would be `foo.github.io/bar`.

Note that we are doing this for convencience only, in this tutorial the package
woudl be published using Github Pages. If you want you can have a custom domain
for your package and the package name then would be based on the domain. The
package name must URL where the package has been "published".




-- end: ds.page