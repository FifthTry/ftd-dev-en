-- ds.page: FTD Language
toc: $ds.toc


/-- ftd.column:
;; id: foo-3


-- ds.markdown: 

FTD is a domain-specific language to represent typed data and user interfaces.


-- ds.h1: Typed Data Language

`ftd` is an alternative to XML/JSON for storing data.

Note: `ftd` is built on a lower level grammar, called [`ftd::p1` grammar](/p1-grammar/),
it defines things like sections, sub-sections, caption, headers, and body.


-- ds.code: ftd file containing data
lang: ftd

\-- record person:
name: caption
location: string
bio: optional body

\-- person amitu: Amit Upadhyay
location: Bangalore, India

Amit is the founder and CEO of FifthTry.

He loves to code, and is pursuing his childhood goal of
becoming a professional starer of the trees.

\-- person list employees:

\-- employees: Sourabh Garg
location: Ranchi, India

Sourabh loves to UI.

\-- employees: Arpita Jaiswal
location: Lucknow, India


-- ds.markdown:

This data can be read from Rust:


-- ds.code: getting data out of ftd
lang: rs

#[derive(serde::Deserialize)]
struct Employee {
    name: String,
    location: String,
    bio: Option<String>
}

let doc = ftd::p2::Document::from("some/id", source, lib)?;
let amitu: Employee = doc.get("amitu")?;
let employees: Vec<Employee> = doc.get("employees")?;


-- ds.markdown:

Read about [ftd's data modelling capability](/data-modelling/) in
detail.


-- ds.h1: UI Language


-- ds.code: hello world ftd
lang: ftd

\-- string msg: hello world

\-- ftd.ftd.text: $msg


-- ds.markdown:

This is a ftd file that defines a variable `msg` and uses it to shows
"hello world" in the UI using `ftd.text` "component".

----


/-- string msg: hello world


/-- ftd.text: $msg


-- ds.markdown:

----

This document is powered by ftd, and the source code listed above is part of this
document, and what you see above between the two lines is rendered by ftd.

Let's see a slightly more complex layout:


-- ds.code:
lang: ftd

\-- ftd.ftd.column:
border-width: 1
width: fill
;; id: outer

\-- ftd.ftd.row:
width: fill
background-color: $ds.neutral-200
padding: 10

\-- ftd.ftd.text: $msg
width: fill

\-- ftd.ftd.row:

\-- ftd.ftd.text: $msg
width: fill

\/-- container outer

\-- ftd.ftd.row:
padding: 10
border-top: 1
width: fill
align: center

\-- ftd.ftd.text:
width: fill

We support **markdown** as well.


-- ds.markdown:

Which gets rendered into:


/-- ftd.column:
border-width: 1
width: fill
;; id: outer-15
margin-bottom: 20

/-- ftd.row:
width: fill
background-color: $fastn.color.main.background.base
padding: 10


/-- ftd.text: $msg
width: fill
color: $fastn.color.main.text


/-- ftd.row:
width: fill


/-- ftd.text: $msg
width: fill
align: right
color: $fastn.color.main.text


/-- container: outer-15


/-- ftd.row:
padding: 10
border-top: 1
width: fill


/-- ftd.text:
width: fill
color: $fastn.color.main.text
color if $ftd.dark-mode: $fastn.color.main.text


We support **markdown** as well.

/-- container: foo-3


-- ds.markdown:

Most websites you come across can be created using this (or will be in the future).
We have a DSL that picks elements from CSS, after simplifying things a little bit.

As a goal we want `ftd` files to be renderable in the browser, as well as in other
modes, like in Terminal using curses UI, natively on Mobile devices, Emacs,
rendering from scratch using just C/assembly for low-powered devices and so on.

-- end: ds.page