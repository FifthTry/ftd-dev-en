
-- import: fifthtry/ft
-- import: fifthtry/ft-core


-- ft-core.concept:


-- ft.page:


-- ft.h0: Variables

`ftd` has support for [rich data modelling](/fifthtry/ftd/data-modelling/), and it
supports declaring variables.


-- ft.code:
lang: ftd

\-- var x: 20
type: integer


-- ft.markdown:

Variables have `type`s.


-- ft.h1: Auto Guessing Basic Types

For [built-in types](/fifthtry/ftd/built-in-types/), integer, boolean,  etc, 
`ftd` can guess the type based on the value:


-- ft.code:
lang: ftd

\-- var x: 20


-- ft.h1: Types

Type of a variable can be one of the [built-in types](/fifthtry/ftd/builtin-types/), 
a [record](/fifthtry/ftd/record/), or an [or-type](/fifthtry/ftd/or-type/).


-- ft.h1: Referring To Another Variable

A variable can be defined as referring to another variable.


-- ft.code:
lang: ftd

\-- var x: 10

\-- var y: ref x


-- ft.h1: Updating a Variable

Once a variable has been defined it can be updated too:


-- ft.code:
lang: ftd

\-- var x: 10

\-- x: 20


-- ft.markdown:

The type of the variable can not be updated.


-- ft.h1: `$processor$`: dynamic variables

`ftd` documents are processed in the context of a "platform", and platform can
provide access to dynamic variables.

Say platform has provided a dynamic variable `os`, which is the operating system
on which this document is getting rendered, you can use that like this:


-- ft.code:
lang: ftd

\-- var name-of-os:
type: string
$processor$: os


-- ft.markdown:

`type` is mandatory when using `$processor$`. Available processors would be 
documented as part of platform documentation.

Processors can also look at data passed, so its possible to create a processor:


-- ft.code:
lang: ftd

\-- var greeting: hello, world
type: string
$processor$: uppercase


-- ft.markdown:

Say the platform has provided a processor `uppercase`, which takes the current 
value, `hello, world` and returns its upper case value. In this case the variable
greeting will hold the value: `HELLO, WORLD`.