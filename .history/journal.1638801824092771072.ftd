


-- ft.page:
id: page


-- ft.h0: FTD Journal


-- ft.h1: Giving up on Special Variables

6th Dec 2021

Was writing a CR about ["fastn actions"](https://www.fifthtry.com/fastn/~/24/), and my
initial thought was to expose form errors using special variables, but then I 
realised we do not have a mechanism to register for changes in [special 
variables](/ftd/~/121/). 

Variable change can only happen on client (it can still be triggered by server 
and sent to client, eg on WebSocket). We are going to have `fastn.js` file to handle
those variables. We already have methods in `ftd.js` to update any variable, and
already have variable dependency tracker that updates the rendered DOM tree in an
efficient way.


-- ft.h2: What about "heavy variables"?

If we are creating regular variables, do we create a single virtual document that
exposes all the variables? Wouldn't computing that document be expensive? What if
we do not even use them?

One simple answer is to not have a single virtual document, but have a bunch of
document, maybe even one document per variable in extreme case. So we only import
the document that we want to use.

We will also have a linter that will complain if a document is imported but not 
used, (and therefore we have [`import: foo as _`](///ftd.dev/~/44/) syntax).


-- ft.h2: "FTD Host"

FASTN is proving to be a very good playground to explore what is the meaning of a FTD
Host. We have the `.get()` method, and FASTN is putting a lot of interesting logic
in it, so this part of design is proving fruitful. Then we need special documents
for "generated" variables, and ftd host will take care of updating them on client 
if needed. 

FASTN also exposes processors, and that's also working out quite well, there are very
FASTN specific processors. 

This does mean there is issue with portability of FTD documents between different
"FTD Hosts", would we have more than one hosts of FASTN would be the only host?

We have at least one contender for next FTD host: arbit pages. If you want to use
ftd to power say your homepage (without using `fastn-repo`), and you must consider,
you are going to need your own variables with your own way of fetching documents
and your own


-- ft.h1: Unified Component Syntax

3rd Dec 2021

Arpita has implemented a unified syntax for component creation.


-- ft.code: old syntax
lang: ftd

\-- component foo:
component: ftd.row
spacing: 20


-- ft.code: new syntax
lang: ftd

\-- ftd.row foo:
spacing: 20


-- ft.markdown:

This was done to make it uniform with declaring variables:


-- ft.code:
lang: ftd

\-- integer bar: 20


-- ft.markdown:

Declaring something new is now always `<type> <name>:`, both for variables, records
and components, as well as for fields and argument definition in records and
components.


-- ft.h1: Backward Compatibility Guarantee

We hope this was the last backward incompatible change. We are now going to become
very careful about backward compatibility. We are not yet 1.0, and we expect at 
least one major backward incompatible change before we really are ready for 
production, but we are now going to avoid it as much as we can.


-- ft.h1: UI As A Type

Arpita has implemented UI as a type. Now a component can take another ui element
as an argument. Till now they could only accept data types.


-- ft.code:
lang: ftd

\-- ftd.column foo:
ftd.ui a:
integer size: 10

\--- a:


-- ft.markdown:

We have introduced a new type, `ftd.ui`, the argument `a` for component `foo` here
has type `ftd.ui`.

Any ftd kernel component can be passed to someone expecting a `ftd.ui`.


-- ft.code:
lang: ftd

\-- foo:
a: ftd.text: hello


-- ft.markdown:

Here we are passing `ftd.text: hello` to `foo` as `a`. We have also implemented
what we call "continuation" to pass parameters:


-- ft.code:
lang: ftd

\-- foo:
a: ftd.text: hello
> size: 20
size: 12


-- ft.markdown:

Here we have passed `size` to both `foo`, `size: 12` goes to `foo`, and to 
`ftd.text`, `> size: 20` means we are continuing from the previous line, and hence
`size: 20` is passed to `ftd.text`.

We can do arbitrary nesting this way.


-- ft.code:
lang: ftd

\-- foo:
a: foo:
> a: foo:
>> a: ftd.text: hello
>>> size: 12
>> size: 30
> size: 20
size: 12


-- ft.markdown:

And so on. Of course this makes things harder to understand, so use this with 
that in mind, don't over do it, break down things into smaller components, code is
read way more often than it is written, a little bit of extra effort goes a long
way keeping things easy.


-- ft.h1: `$var` Everything Is Done

25th Nov 2021

We finished implementation of $ for all variable.


-- ft.h1: New Component Syntax

We are now working on unified component / variable declaration syntax. Currently
our components are defined like this:


-- ft.code:
lang: ftd

\-- component foo:
component: ftd.text
text: some text


-- ft.markdown:

We are now going to use the following syntax for the same:


-- ft.code:
lang: ftd

\-- ftd.text foo:
text: some text


-- ft.markdown:

As you can see its simpler. It aligns with how we declare a variable:


-- ft.code:
lang: ftd

\-- integer bar: 20


-- ft.h1: Components as type

Currently a component can only accept basic data types, like integer and string,
but not other components. We are now going to use component as type:


-- ft.code:
lang: ftd

\-- ftd.row foo:
ftd.text child:

\-- foo:
child: ftd.text: hello


-- ft.markdown:

Here we have `child` of type `ftd.text`.


-- ft.h2: Thoughts On UI Types

Can only kernel types be used for UI type or any component? Ideally we should be
able to specify a component, and any direct invocation of that component, or any
other component that uses that component as a base should be passed? What if I 
wanted a `ftd.row`, but the component derived from a `ftd.row` is no longer 
`row-like`? Why do I want a row specifically? It kind of does not make sense? Maybe
I want a container, in which case I may be adding children to that container, which
means I have to have generic types like `ftd.element`, which accepts any ui element,
or `ftd.container`, which accepts a container.

What about `ftd.image`? What if I want to say give me an image. I can pass any 
instance ftd.image or instance of a component created directly or indirectly from
ftd.image. But what about a row that wraps an image? Should that row not be 
accepted by a component that is expecting image? Why would any component want to 
accept an image specifically?


-- ft.h1: Started FASTN: FTD Package Manager

FTD is an awesome language, and it deserves a kick-ass package manager. Today you
can not launch a language without a package manager. So we have started working on
[`fastn`](/fastn/).


-- ft.h1: FTD Logo

Jay has created a logo for FTD that we like:


-- ft.image:
src: https://i.imgur.com/eaxBC1d.jpg
width: 300
align: center


-- ft.h1: `try.ftd.dev`

We movee `play.fifthtry.com` to [`try.ftd.dev`](https://try.ftd.dev),now that 
`ftd` docs are moving to [`ftd.dev`](https://ftd.dev). They will still use 
FifthTry, just the domain would be custom.


-- ft.h1: [`$var` Everything](/ftd/~/105/) Update

15th Nov 2021

Arpita has partially implemented `$var` everywhere change. As of now, global 
variables can be referred using `$foo` syntax, no need to use `ref`. Also `@foo`
syntax is gone, any `$foo` is editable as well.

What she is working now is external variables, you can define a variable on top of
a component:


-- ft.code:
lang: ftd

\-- ftd.row:
$foo: boolean with default false


-- ft.markdown:

Once external variable is done she has to fix the `boolean with default false` syntax
and use `boolean $foo: false` or even `$foo: false` to declare a variable.


-- ft.h1: clean api CR

15th Nov 2021

Wrote about my thoughts on cleaning up FTD [public crate api](/ftd/~/108/).


-- ft.h1: `detached` support proposal

13th Nov 2021


-- ft.iframe:
src: https://www.loom.com/embed/07681c220abd4eb584c75327c686360b


-- ft.markdown:

Wrote up a [CR for `detached` components](/ftd/~/106/): components that are not 
part of UI when created, and added a new `include` keyword to include any detached
component in "current container".


-- ft.h1: Started Journal

13th Nov 2021


-- ft.iframe:
src: https://www.loom.com/embed/dd33e35449f64963ac694155b3ed88e0


-- ft.markdown:

We have decided to start a journal for FTD. FTD has been under a lot of development
and its good for us to record our daily development.

We have been keeping a personal journal in FifthTry internal documentation, but
it would be better if it moved all FTD related things here for everyone's benefit.

We kind of believe in writing down our thoughts during all meetings as much as we
can, etc, a lot of stuff we write in change requests, linked from the Roadmap page.
But since they are all scattered across different CRs, its not easy to keep up 
with what is going on with the project, so we kind of want to duplicate or link
here what is going on.

We also want to create a loom recording after the fact, just to capture a few more
things we might have missed when writing it down.


-- ft.h1: Fix: spacing issue

12th Nov 2021


-- ft.iframe:
src: https://www.loom.com/embed/23000f3b4fc442f988181c5ff65c7949


-- ft.markdown:

Consider the following code:


-- ft.code:
lang: ftd

\-- var show: true

\-- foo:

\--- ftd.text: Hello ðŸ‘‹ 
if: show

\--- ftd.text: World ðŸŒŽ 

\-- ftd.text: Click here!
$event-click$: toggle show

\-- component foo:
component: ftd.column
open: some-id

\--- ftd.text: Title

\--- ftd.row:
spacing: 20
id: some-id


-- ft.markdown:

This is how the DOM structure should look like:


-- ftd.scene:
height: 400


-- box:
left: 20
top: 20
width: 500
height: 300


-- text: `ftd.main` (`ftd.column`)
left: 290
top: 323


-- box:
left: 40
top: 40
width: 460
height: 200


-- text-box: Title
left: 55
top: 55


-- text: `ftd.row: some-id`
left: 300
top: 88


-- box:
width: 430
height: 80
top: 110
left: 55


-- text: `foo`
top: 215
left: 457


-- text-box: Hello ðŸ‘‹
top: 130
left: 70


-- text-box: World ðŸŒŽ
top: 130
left: 200


-- ftd.text: Click Here!
top: 250
left: 45


-- component text:
component: ftd.text
caption $text: 
text: $text


-- component box:
component: ftd.column
string $width: 
width: $width
string $height: 
height: $height
border-width: 1
border-radius: 5
open: false


-- component text-box:
component: ftd.text
caption $text: 
text: $text
padding: 10
border-width: 1
border-radius: 5


-- container: page


-- $show: true


-- ft.markdown:

This is how it should look like:


-- foo:

--- ftd.text: Hello ðŸ‘‹
if: $show

--- ftd.text: World ðŸŒŽ


-- ftd.text: Click here!
$event-click$: toggle $show


-- component foo:
component: ftd.column
open: some-id

--- ftd.text: Title

--- ftd.row:
spacing: 20
id: some-id


-- ft.markdown:

And this is how it used to look like:


-- ft.image:
src: https://i.imgur.com/7vypfBR.jpg
width: 130


-- ft.markdown:

There were two issues for proper rendering of the above code:

1. `--- ftd.text: Hello ðŸ‘‹` and `--- ftd.text: World ðŸŒŽ` are two external children
of component `foo` and `foo` is open at `--- ftd.row:`. Earlier we used to wrap all
the external children in a column component (Why not row? no good reason just that 
column is used a lot) and then attach this wrapper component to the desired place. 
So this created a problem here. Instead of children appearing in a row-wise fashion,
it appears column-wise.

2. Also, open container `ftd.row` has `spacing: 20` which means all its children would
contain spacing from each other, except the first visible one, but here it has only
one wrapper child, so no spacing.


-- ft.h2: How have we solved this?

Just remove the wrapper and put all external children directly inside the desired 
node. But how would we do reparenting of them (like in the case of event handling)?
Put a new attribute (`data-ext-id`) that has the same value in all the external 
children and during reparenting, access children using this attribute.


-- ft.h2: Is everything solved?

Not yet. In the case of event-handling, what if the first child becomes invisible 
or removed and so what about spacing then?

As we know there should be no space for the first element, so now that the first 
child has vanished, the second child should act as the first one and space 
should be removed. (And obviously, when the first child becomes visible again, 
the second one should restore the spacing.)

Here's the solution. We have added a new attribute (`data-spacing`) in the 
parent node that contains the spacing value. Every time this kind of event occurs, 
we reevaluate spacing for its children.


-- ft.h2: Are we done now?

Yes, all problems are resolved. ðŸŽ‰ ðŸŽŠ


-- ft.h1: Image link Fix

Fri, 12th Nov 2012

Consider the following code:


-- ft.code:
lang: ftd

\-- ftd.image:
src: https://www.w3schools.com/cssref/img_tree.gif
link: https://www.amitu.com/fifthtry/amitu/


-- ft.markdown:

Earlier, the link was not working. We just fixed this issue.


-- ft.h2: What was the issue?

For link we use `<a>` tag and for image we use `<img>` tag. `<img>` tag was 
overriding `<a>`. Basically we were attaching `href` on top of `img` tag.


-- ft.h2: How have we resolved?

Now we create `<img>` tag and make it child of `<a>`.